{"version":3,"file":"component---src-pages-404-js-0f8d41b2c442d3225106.js","mappings":"mNAMA,MAWaA,EAAOA,KAAMC,EAAAA,EAAAA,GAACC,EAAAA,EAAG,CAACC,MAAM,mBAErC,UAbqBC,IAAyB,IAAxB,KAAEC,EAAI,SAAEC,GAAUF,EACtC,MAAMG,EAAYF,EAAKG,KAAKC,aAAaN,MAEzC,OACEF,EAAAA,EAAAA,GAACS,EAAAA,EAAM,CAACJ,SAAUA,EAAUH,MAAOI,IACjCN,EAAAA,EAAAA,GAAA,UAAI,mBACJA,EAAAA,EAAAA,GAAA,SAAG,4D,uDC0BT,IAnCeG,IAA4C,IAA3C,SAAEE,EAAQ,MAAEH,EAAK,OAAEQ,EAAM,SAAEC,GAAUR,EACnD,MACMS,EAD6B,MAChBP,EAASQ,SAC5B,IAAIC,EAgBJ,OAbEA,EADEF,GAEAZ,EAAAA,EAAAA,GAAA,MAAIe,UAAU,iBACZf,EAAAA,EAAAA,GAACgB,EAAAA,KAAI,CAACC,GAAG,KAAKf,KAKhBF,EAAAA,EAAAA,GAACgB,EAAAA,KAAI,CAACD,UAAU,mBAAmBE,GAAG,KACnCf,IAMLF,EAAAA,EAAAA,GAAA,OACEe,UAAWL,EAAS,kBAAoB,iBACxC,oBAAmBE,IAGnBZ,EAAAA,EAAAA,GAAA,YAAOW,IACPX,EAAAA,EAAAA,GAAA,cAAQ,MACH,IAAIkB,MAAOC,cAAc,aAC5B,KACAnB,EAAAA,EAAAA,GAAA,KAAGoB,KAAK,yBAAwB,e,yDCiBxC,IAvCYjB,IAAuC,IAADkB,EAAAC,EAAAC,EAAA,IAArC,YAAEC,EAAW,MAAEtB,EAAK,SAAES,GAAUR,EAC3C,MAAM,KAAEI,IAASkB,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBF,GAAejB,EAAKC,aAAagB,YACnDG,EAAgC,QAApBN,EAAGd,EAAKC,oBAAY,IAAAa,OAAA,EAAjBA,EAAmBnB,MAExC,OACEF,EAAAA,EAAAA,GAAA4B,EAAAA,SAAA,MACE5B,EAAAA,EAAAA,GAAA,aAAQ2B,EAAkBzB,EAAK,MAAMyB,EAAiBzB,IACtDF,EAAAA,EAAAA,GAAA,QAAM6B,KAAK,cAAcC,QAASJ,KAClC1B,EAAAA,EAAAA,GAAA,QAAM+B,SAAS,WAAWD,QAAS5B,KACnCF,EAAAA,EAAAA,GAAA,QAAM+B,SAAS,iBAAiBD,QAASJ,KACzC1B,EAAAA,EAAAA,GAAA,QAAM+B,SAAS,UAAUD,QAAQ,aACjC9B,EAAAA,EAAAA,GAAA,QAAM6B,KAAK,eAAeC,QAAQ,aAClC9B,EAAAA,EAAAA,GAAA,QACE6B,KAAK,kBACLC,SAA0B,QAAjBR,EAAAf,EAAKC,oBAAY,IAAAc,GAAQ,QAARC,EAAjBD,EAAmBU,cAAM,IAAAT,OAAR,EAAjBA,EAA2BU,UAAO,MAE7CjC,EAAAA,EAAAA,GAAA,QAAM6B,KAAK,gBAAgBC,QAAS5B,KACpCF,EAAAA,EAAAA,GAAA,QAAM6B,KAAK,sBAAsBC,QAASJ,IACzCf,G","sources":["webpack://gatsby-starter-blog/./src/pages/404.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js"],"sourcesContent":["import * as React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\n\r\nimport Layout from \"../components/layout\"\r\nimport Seo from \"../components/seo\"\r\n\r\nconst NotFoundPage = ({ data, location }) => {\r\n  const siteTitle = data.site.siteMetadata.title\r\n\r\n  return (\r\n    <Layout location={location} title={siteTitle}>\r\n      <h1>404: Not Found</h1>\r\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = () => <Seo title=\"404: Not Found\" />\r\n\r\nexport default NotFoundPage\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nconst Layout = ({ location, title, isBlog, children }) => {\r\n  const rootPath = `${__PATH_PREFIX__}/`\r\n  const isRootPath = location.pathname === rootPath\r\n  let header\r\n\r\n  if (isRootPath) {\r\n    header = (\r\n      <h1 className=\"main-heading\">\r\n        <Link to=\"/\">{title}</Link>\r\n      </h1>\r\n    )\r\n  } else {\r\n    header = (\r\n      <Link className=\"header-link-home\" to=\"/\">\r\n        {title}\r\n      </Link>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div \r\n      className={isBlog ? \"global-wrapper2\" : \"global-wrapper\"} \r\n      data-is-root-path={isRootPath}\r\n    >\r\n      {/* <header className=\"global-header\">{header}</header> */}\r\n      <main>{children}</main>\r\n      <footer>\r\n        Â© {new Date().getFullYear()}, Built by\r\n        {` `}\r\n        <a href=\"https://hyperdart.com\">hyperDart</a>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Layout\r\n","/**\r\n * SEO component that queries for data with\r\n * Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\r\n */\r\n\r\nimport * as React from \"react\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst Seo = ({ description, title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            social {\r\n              twitter\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta\r\n        name=\"twitter:creator\"\r\n        content={site.siteMetadata?.social?.twitter || ``}\r\n      />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Seo\r\n"],"names":["Head","___EmotionJSX","Seo","title","_ref","data","location","siteTitle","site","siteMetadata","Layout","isBlog","children","isRootPath","pathname","header","className","Link","to","Date","getFullYear","href","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","useStaticQuery","metaDescription","defaultTitle","React","name","content","property","social","twitter"],"sourceRoot":""}